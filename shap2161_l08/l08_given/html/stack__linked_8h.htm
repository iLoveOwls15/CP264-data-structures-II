<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 6: src/stack_linked.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 6<span id="projectnumber">&#160;2023-10-05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('stack__linked_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">stack_linked.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
<code>#include &lt;stdbool.h&gt;</code><br />
<code>#include &lt;limits.h&gt;</code><br />
<code>#include &lt;assert.h&gt;</code><br />
<code>#include &quot;<a class="el" href="data_8h_source.htm">data.h</a>&quot;</code><br />
</div>
<p><a href="stack__linked_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstack__node.htm">stack_node</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a1741765370e13f143f1ac2322fb0b399"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structstack__node.htm">stack_node</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a1741765370e13f143f1ac2322fb0b399">stack_node</a></td></tr>
<tr class="separator:a1741765370e13f143f1ac2322fb0b399"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7dc66ff96b875686ffe6f49664605b06"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a7dc66ff96b875686ffe6f49664605b06">stack_initialize</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **stack, <a class="el" href="data_8h.htm#adeddcc8bf4eb39d8334e0b2e8c0a7b66">data_type_copy</a> copy, <a class="el" href="data_8h.htm#a6e4017f53a4c7a90dae65dff97eadaa1">data_type_string</a> to_string, <a class="el" href="data_8h.htm#ad3922876dfa32650cc7eac9d4b138de3">data_type_destroy</a> destroy)</td></tr>
<tr class="separator:a7dc66ff96b875686ffe6f49664605b06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9220fcdaae249dcb67fad04223655032"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a9220fcdaae249dcb67fad04223655032">stack_destroy</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **source)</td></tr>
<tr class="separator:a9220fcdaae249dcb67fad04223655032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adec72767412c8dfdc58b2ea00f3c7d3b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#adec72767412c8dfdc58b2ea00f3c7d3b">stack_empty</a> (const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source)</td></tr>
<tr class="separator:adec72767412c8dfdc58b2ea00f3c7d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addcd3ba369d52741aaac815dcc023393"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#addcd3ba369d52741aaac815dcc023393">stack_full</a> (const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source)</td></tr>
<tr class="separator:addcd3ba369d52741aaac815dcc023393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f15ebddfb6fea9b74afdde462309df7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a5f15ebddfb6fea9b74afdde462309df7">stack_push</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source, const <a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *item)</td></tr>
<tr class="separator:a5f15ebddfb6fea9b74afdde462309df7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb7313149ea551e33a701f90e46561a4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#acb7313149ea551e33a701f90e46561a4">stack_peek</a> (const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source, <a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *item)</td></tr>
<tr class="separator:acb7313149ea551e33a701f90e46561a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a868d3a3c8794bcb6bce151e5a33b7bac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a868d3a3c8794bcb6bce151e5a33b7bac">stack_pop</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source, <a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *item)</td></tr>
<tr class="separator:a868d3a3c8794bcb6bce151e5a33b7bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26f7348171c47eba2c61b691a5168938"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a26f7348171c47eba2c61b691a5168938">stack_print</a> (const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source)</td></tr>
<tr class="separator:a26f7348171c47eba2c61b691a5168938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94e0e7b03fcabdc8e76d94584bf05df1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a94e0e7b03fcabdc8e76d94584bf05df1">stack_copy</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **target, const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source)</td></tr>
<tr class="separator:a94e0e7b03fcabdc8e76d94584bf05df1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23ff1679fb6ac5b4aa7e25dbf222d302"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a23ff1679fb6ac5b4aa7e25dbf222d302">stack_combine</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *target, <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source1, <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source2)</td></tr>
<tr class="separator:a23ff1679fb6ac5b4aa7e25dbf222d302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3383c1bc931fd90df8dc4078298678"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="stack__linked_8h.htm#a0d3383c1bc931fd90df8dc4078298678">stack_split_alt</a> (<a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *target1, <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *target2, <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *source)</td></tr>
<tr class="separator:a0d3383c1bc931fd90df8dc4078298678"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md19"></a>
Linked Stack Header File</h2>
<dl class="section author"><dt>Author</dt><dd>David Brown, 123456789, <a href="#" onclick="location.href='mai'+'lto:'+'dbr'+'ow'+'n@w'+'lu'+'.ca'; return false;">dbrow<span class="obfuscator">.nosp@m.</span>n@wl<span class="obfuscator">.nosp@m.</span>u.ca</a></dd></dl>
<dl class="section version"><dt>Version</dt><dd>2023-10-08</dd></dl>
<hr  />
<p> DO NOT CHANGE CONTENTS </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="a1741765370e13f143f1ac2322fb0b399" name="a1741765370e13f143f1ac2322fb0b399"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1741765370e13f143f1ac2322fb0b399">&#9670;&#160;</a></span>stack_node</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structstack__node.htm">stack_node</a> <a class="el" href="structstack__node.htm">stack_node</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Stack node. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a23ff1679fb6ac5b4aa7e25dbf222d302" name="a23ff1679fb6ac5b4aa7e25dbf222d302"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23ff1679fb6ac5b4aa7e25dbf222d302">&#9670;&#160;</a></span>stack_combine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_combine </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Combines the contents of two source stacks into a target stack. Items alternate. Source stacks are empty (not destroyed) when the function completes. Moves nodes, not data.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to target stack </td></tr>
    <tr><td class="paramname">source1</td><td>- pointer to first source stack </td></tr>
    <tr><td class="paramname">source2</td><td>- pointer to second source stack </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a94e0e7b03fcabdc8e76d94584bf05df1" name="a94e0e7b03fcabdc8e76d94584bf05df1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94e0e7b03fcabdc8e76d94584bf05df1">&#9670;&#160;</a></span>stack_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies source to target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a stack </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9220fcdaae249dcb67fad04223655032" name="a9220fcdaae249dcb67fad04223655032"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9220fcdaae249dcb67fad04223655032">&#9670;&#160;</a></span>stack_destroy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Destroys a stack.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adec72767412c8dfdc58b2ea00f3c7d3b" name="adec72767412c8dfdc58b2ea00f3c7d3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adec72767412c8dfdc58b2ea00f3c7d3b">&#9670;&#160;</a></span>stack_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stack_empty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a stack is empty.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if source is empty, false otherwise </dd></dl>

</div>
</div>
<a id="addcd3ba369d52741aaac815dcc023393" name="addcd3ba369d52741aaac815dcc023393"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addcd3ba369d52741aaac815dcc023393">&#9670;&#160;</a></span>stack_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stack_full </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a stack is full.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if the stack is full, false otherwise </dd></dl>

</div>
</div>
<a id="a7dc66ff96b875686ffe6f49664605b06" name="a7dc66ff96b875686ffe6f49664605b06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dc66ff96b875686ffe6f49664605b06">&#9670;&#160;</a></span>stack_initialize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_initialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> **&#160;</td>
          <td class="paramname"><em>stack</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#adeddcc8bf4eb39d8334e0b2e8c0a7b66">data_type_copy</a>&#160;</td>
          <td class="paramname"><em>copy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a6e4017f53a4c7a90dae65dff97eadaa1">data_type_string</a>&#160;</td>
          <td class="paramname"><em>to_string</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#ad3922876dfa32650cc7eac9d4b138de3">data_type_destroy</a>&#160;</td>
          <td class="paramname"><em>destroy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes a stack.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stack</td><td>- pointer to the stack to initialize. </td></tr>
    <tr><td class="paramname">copy</td><td>- the data copy function </td></tr>
    <tr><td class="paramname">to_string</td><td>- the data to_string function </td></tr>
    <tr><td class="paramname">destroy</td><td>- the data destroy function </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acb7313149ea551e33a701f90e46561a4" name="acb7313149ea551e33a701f90e46561a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb7313149ea551e33a701f90e46561a4">&#9670;&#160;</a></span>stack_peek()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stack_peek </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a copy of the item on the top of a stack, stack is unchanged.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to a copy of the item to retrieve </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item peeked, false otherwise (stack is empty) </dd></dl>

</div>
</div>
<a id="a868d3a3c8794bcb6bce151e5a33b7bac" name="a868d3a3c8794bcb6bce151e5a33b7bac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a868d3a3c8794bcb6bce151e5a33b7bac">&#9670;&#160;</a></span>stack_pop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stack_pop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes and returns the item on the top of a stack.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
    <tr><td class="paramname">item</td><td>- pointer the item to remove </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item popped, false otherwise (stack is empty) </dd></dl>

</div>
</div>
<a id="a26f7348171c47eba2c61b691a5168938" name="a26f7348171c47eba2c61b691a5168938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26f7348171c47eba2c61b691a5168938">&#9670;&#160;</a></span>stack_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints the items in a stack from top to bottom. (For testing only).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5f15ebddfb6fea9b74afdde462309df7" name="a5f15ebddfb6fea9b74afdde462309df7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f15ebddfb6fea9b74afdde462309df7">&#9670;&#160;</a></span>stack_push()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool stack_push </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a3a4aad394acbc16c69c7c736f90f19b3">data_type</a> *&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Pushes a copy of an item onto a stack.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a stack </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to push </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- true if item pushed, false otherwise </dd></dl>

</div>
</div>
<a id="a0d3383c1bc931fd90df8dc4078298678" name="a0d3383c1bc931fd90df8dc4078298678"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3383c1bc931fd90df8dc4078298678">&#9670;&#160;</a></span>stack_split_alt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void stack_split_alt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>target1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>target2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structstack__linked__struct.htm">stack_linked_struct</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Splits a source stack alternately into two target stacks. Items alternate. Source stack is empty (not destroyed) when function completes. Moves nodes, not data.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target1</td><td>- pointer to first target stack </td></tr>
    <tr><td class="paramname">target2</td><td>- pointer to second target stack </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to source stack </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="stack__linked_8h.htm">stack_linked.h</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
