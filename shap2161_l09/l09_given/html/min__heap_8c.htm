<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 9: src/min_heap.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 9<span id="projectnumber">&#160;2024-03-11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('min__heap_8c.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">min_heap.c File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
<code>#include &quot;<a class="el" href="min__heap_8h_source.htm">min_heap.h</a>&quot;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa6d34b8a1c354aa8312be51afb5964fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#aa6d34b8a1c354aa8312be51afb5964fb">min_heap_free</a> (<a class="el" href="structmin__heap.htm">min_heap</a> **source)</td></tr>
<tr class="separator:aa6d34b8a1c354aa8312be51afb5964fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab5cf02ca72c4e9bc203648ee6caa2f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#aab5cf02ca72c4e9bc203648ee6caa2f0">min_heap_heapify</a> (<a class="el" href="structmin__heap.htm">min_heap</a> *source, int *keys, int count)</td></tr>
<tr class="separator:aab5cf02ca72c4e9bc203648ee6caa2f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a787687245e3e8a16e1fbbabbf327594e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a787687245e3e8a16e1fbbabbf327594e">min_heap_empty</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a787687245e3e8a16e1fbbabbf327594e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b04ffdde411006dfcc9a82f9563f416"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a2b04ffdde411006dfcc9a82f9563f416">min_heap_full</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a2b04ffdde411006dfcc9a82f9563f416"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38c48d8d633bea21a71ad70755196273"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a38c48d8d633bea21a71ad70755196273">min_heap_count</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a38c48d8d633bea21a71ad70755196273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff485980b40134a284ec0022ec52bb5f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#aff485980b40134a284ec0022ec52bb5f">min_heap_insert</a> (<a class="el" href="structmin__heap.htm">min_heap</a> *source, const int value)</td></tr>
<tr class="separator:aff485980b40134a284ec0022ec52bb5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ac140c5cc9feb93ab2efd31df7c5906"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a3ac140c5cc9feb93ab2efd31df7c5906">min_heap_peek</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a3ac140c5cc9feb93ab2efd31df7c5906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4297a973255ee14b33dcc139ae558a38"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a4297a973255ee14b33dcc139ae558a38">min_heap_remove</a> (<a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a4297a973255ee14b33dcc139ae558a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9832627c1769935f2dd5293fe936d402"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a9832627c1769935f2dd5293fe936d402">min_heap_valid</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a9832627c1769935f2dd5293fe936d402"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93940880e4bde735bcef0792cc004f6c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a93940880e4bde735bcef0792cc004f6c">min_heap_replace</a> (<a class="el" href="structmin__heap.htm">min_heap</a> *source, int replacement)</td></tr>
<tr class="separator:a93940880e4bde735bcef0792cc004f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb96141e06825c6db341b975566b870"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a8fb96141e06825c6db341b975566b870">heap_sort</a> (int *values, int count)</td></tr>
<tr class="separator:a8fb96141e06825c6db341b975566b870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a25870dfc9c9a970b6bd1e4e5519ea3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="min__heap_8c.htm#a2a25870dfc9c9a970b6bd1e4e5519ea3">min_heap_print</a> (const <a class="el" href="structmin__heap.htm">min_heap</a> *source)</td></tr>
<tr class="separator:a2a25870dfc9c9a970b6bd1e4e5519ea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md4"></a>
Minimum Heap Source Code File</h2>
<dl class="section author"><dt>Author</dt><dd>name, id, email</dd></dl>
<dl class="section version"><dt>Version</dt><dd>2024-03-11</dd></dl>
<hr  />
 </div><h2 class="groupheader">Function Documentation</h2>
<a id="a8fb96141e06825c6db341b975566b870" name="a8fb96141e06825c6db341b975566b870"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fb96141e06825c6db341b975566b870">&#9670;&#160;</a></span>heap_sort()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void heap_sort </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sorts an array of integers.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">values</td><td>- array of values to sort </td></tr>
    <tr><td class="paramname">count</td><td>- number of values in values </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a38c48d8d633bea21a71ad70755196273" name="a38c48d8d633bea21a71ad70755196273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38c48d8d633bea21a71ad70755196273">&#9670;&#160;</a></span>min_heap_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of values in source.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- number of values in source </dd></dl>

</div>
</div>
<a id="a787687245e3e8a16e1fbbabbf327594e" name="a787687245e3e8a16e1fbbabbf327594e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a787687245e3e8a16e1fbbabbf327594e">&#9670;&#160;</a></span>min_heap_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_empty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if source is empty.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- 1 if source is empty, 0 otherwise. </dd></dl>

</div>
</div>
<a id="aa6d34b8a1c354aa8312be51afb5964fb" name="aa6d34b8a1c354aa8312be51afb5964fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6d34b8a1c354aa8312be51afb5964fb">&#9670;&#160;</a></span>min_heap_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void min_heap_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structmin__heap.htm">min_heap</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Frees contents of source.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2b04ffdde411006dfcc9a82f9563f416" name="a2b04ffdde411006dfcc9a82f9563f416"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b04ffdde411006dfcc9a82f9563f416">&#9670;&#160;</a></span>min_heap_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_full </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if source is full, i.e. count == capacity</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- 1 if source is full, 0 otherwise. </dd></dl>

</div>
</div>
<a id="aab5cf02ca72c4e9bc203648ee6caa2f0" name="aab5cf02ca72c4e9bc203648ee6caa2f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab5cf02ca72c4e9bc203648ee6caa2f0">&#9670;&#160;</a></span>min_heap_heapify()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void min_heap_heapify </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create a heap from an array of values. Heap capacity must be large enough to hold all values in array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
    <tr><td class="paramname">values</td><td>- array of values to insert into heap </td></tr>
    <tr><td class="paramname">count</td><td>- number of values in values array </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aff485980b40134a284ec0022ec52bb5f" name="aff485980b40134a284ec0022ec52bb5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff485980b40134a284ec0022ec52bb5f">&#9670;&#160;</a></span>min_heap_insert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void min_heap_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a value to source.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
    <tr><td class="paramname">value</td><td>- the value to add to source </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3ac140c5cc9feb93ab2efd31df7c5906" name="a3ac140c5cc9feb93ab2efd31df7c5906"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ac140c5cc9feb93ab2efd31df7c5906">&#9670;&#160;</a></span>min_heap_peek()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_peek </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the value in the root of source, source is unchanged.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- the value in the root of source </dd></dl>

</div>
</div>
<a id="a2a25870dfc9c9a970b6bd1e4e5519ea3" name="a2a25870dfc9c9a970b6bd1e4e5519ea3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a25870dfc9c9a970b6bd1e4e5519ea3">&#9670;&#160;</a></span>min_heap_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void min_heap_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints the elements in source in level order. (For testing only).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4297a973255ee14b33dcc139ae558a38" name="a4297a973255ee14b33dcc139ae558a38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4297a973255ee14b33dcc139ae558a38">&#9670;&#160;</a></span>min_heap_remove()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes and returns the value in the root of source.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- the value in the root of source </dd></dl>

</div>
</div>
<a id="a93940880e4bde735bcef0792cc004f6c" name="a93940880e4bde735bcef0792cc004f6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93940880e4bde735bcef0792cc004f6c">&#9670;&#160;</a></span>min_heap_replace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>replacement</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove the smallest value from source and inserts a new value. source count does not change.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a heap </td></tr>
    <tr><td class="paramname">replacement</td><td>- value to add to source </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- value replaced in source </dd></dl>

</div>
</div>
<a id="a9832627c1769935f2dd5293fe936d402" name="a9832627c1769935f2dd5293fe936d402"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9832627c1769935f2dd5293fe936d402">&#9670;&#160;</a></span>min_heap_valid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int min_heap_valid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structmin__heap.htm">min_heap</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a heap is valid: i.e. all values are &gt;= parent values.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to heap </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- 1 if heap is valid, 0 otherwise </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="min__heap_8c.htm">min_heap.c</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
