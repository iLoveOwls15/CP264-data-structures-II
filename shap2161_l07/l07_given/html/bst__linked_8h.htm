<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>CP264: Lab 7: src/bst_linked.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">CP264: Lab 7<span id="projectnumber">&#160;2024-03-01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.7 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('bst__linked_8h.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">bst_linked.h File Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
<code>#include &quot;<a class="el" href="data_8h_source.htm">data.h</a>&quot;</code><br />
</div>
<p><a href="bst__linked_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_b_s_t___n_o_d_e.htm">BST_NODE</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbst__linked.htm">bst_linked</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ab91e75b0312ca2ef3a4e523385b6d5c4"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="struct_b_s_t___n_o_d_e.htm">BST_NODE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a></td></tr>
<tr class="separator:ab91e75b0312ca2ef3a4e523385b6d5c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6dde7b5c7994aacac2591c0b6b5e42a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a6dde7b5c7994aacac2591c0b6b5e42a2">bst_initialize</a> ()</td></tr>
<tr class="separator:a6dde7b5c7994aacac2591c0b6b5e42a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5af68d21028d33b9ca8746581422b3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#ae5af68d21028d33b9ca8746581422b3b">bst_free</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> **source)</td></tr>
<tr class="separator:ae5af68d21028d33b9ca8746581422b3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95cfbce2d83f6508a68adaaa9e34d65"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#aa95cfbce2d83f6508a68adaaa9e34d65">bst_empty</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:aa95cfbce2d83f6508a68adaaa9e34d65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e947dc3a56a1728d86e3603d33dedee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a3e947dc3a56a1728d86e3603d33dedee">bst_full</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a3e947dc3a56a1728d86e3603d33dedee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a78151ba2ee9dc65c0779d463cce02"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a97a78151ba2ee9dc65c0779d463cce02">bst_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a97a78151ba2ee9dc65c0779d463cce02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a841b1190e477ed19d101bbcba7e5e685"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a841b1190e477ed19d101bbcba7e5e685">bst_insert</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a841b1190e477ed19d101bbcba7e5e685"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f274c4627c7a02541e80f14105062fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a2f274c4627c7a02541e80f14105062fe">bst_retrieve</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a2f274c4627c7a02541e80f14105062fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fcd3c3d41dc8afbb7e187aeb63cde72"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a5fcd3c3d41dc8afbb7e187aeb63cde72">bst_remove</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> *source, const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> key, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a5fcd3c3d41dc8afbb7e187aeb63cde72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98e78b40c1c60c9c59a902d2d788152d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a98e78b40c1c60c9c59a902d2d788152d">bst_copy</a> (<a class="el" href="structbst__linked.htm">bst_linked</a> **target, const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a98e78b40c1c60c9c59a902d2d788152d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca3ec0054542adb0680c8cb4fdb4a20d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#aca3ec0054542adb0680c8cb4fdb4a20d">bst_inorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:aca3ec0054542adb0680c8cb4fdb4a20d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9988c51188dc19ac00cf37e7108113ff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a9988c51188dc19ac00cf37e7108113ff">bst_preorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:a9988c51188dc19ac00cf37e7108113ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6584e1a42dadce1471ca0e451463b4aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a6584e1a42dadce1471ca0e451463b4aa">bst_postorder</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *items)</td></tr>
<tr class="separator:a6584e1a42dadce1471ca0e451463b4aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b80207f6530db7ce5307f427152ecd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a8b80207f6530db7ce5307f427152ecd2">bst_max</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a8b80207f6530db7ce5307f427152ecd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03cd6ac43b30b2a5bdd86710e061f0ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a03cd6ac43b30b2a5bdd86710e061f0ee">bst_min</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> item)</td></tr>
<tr class="separator:a03cd6ac43b30b2a5bdd86710e061f0ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9751875df4515840566a2f41336054dc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a9751875df4515840566a2f41336054dc">bst_leaf_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a9751875df4515840566a2f41336054dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74f183ae675b6fdcc1d1feb8c49602e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#af74f183ae675b6fdcc1d1feb8c49602e">bst_one_child_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:af74f183ae675b6fdcc1d1feb8c49602e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af164f2d603caf92d9b247e4e78aa867b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#af164f2d603caf92d9b247e4e78aa867b">bst_two_child_count</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:af164f2d603caf92d9b247e4e78aa867b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac80910535346660f4628b104aa3d63ce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#ac80910535346660f4628b104aa3d63ce">bst_node_counts</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source, int *zero, int *one, int *two)</td></tr>
<tr class="separator:ac80910535346660f4628b104aa3d63ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db7b9cc127b114e89b4f1711cdcdfd2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a8db7b9cc127b114e89b4f1711cdcdfd2">bst_balanced</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a8db7b9cc127b114e89b4f1711cdcdfd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a245ac82a46c4b00e0747ac2f623f678c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a245ac82a46c4b00e0747ac2f623f678c">bst_valid</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a245ac82a46c4b00e0747ac2f623f678c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a537524e3705b499bce7b0c39651945d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a537524e3705b499bce7b0c39651945d3">bst_equals</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *target, const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a537524e3705b499bce7b0c39651945d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ae39906ea3559a8d085a82fefe37cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bst__linked_8h.htm#a06ae39906ea3559a8d085a82fefe37cc">bst_print</a> (const <a class="el" href="structbst__linked.htm">bst_linked</a> *source)</td></tr>
<tr class="separator:a06ae39906ea3559a8d085a82fefe37cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><hr  />
<h2><a class="anchor" id="autotoc_md4"></a>
Linked BST Header File</h2>
<dl class="section author"><dt>Author</dt><dd>David Brown, 123456789, <a href="#" onclick="location.href='mai'+'lto:'+'dbr'+'ow'+'n@w'+'lu'+'.ca'; return false;">dbrow<span class="obfuscator">.nosp@m.</span>n@wl<span class="obfuscator">.nosp@m.</span>u.ca</a></dd></dl>
<dl class="section version"><dt>Version</dt><dd>2024-03-01</dd></dl>
<hr  />
<p> DO NOT CHANGE CONTENTS </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="ab91e75b0312ca2ef3a4e523385b6d5c4" name="ab91e75b0312ca2ef3a4e523385b6d5c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91e75b0312ca2ef3a4e523385b6d5c4">&#9670;&#160;</a></span>bst_node</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="struct_b_s_t___n_o_d_e.htm">BST_NODE</a> <a class="el" href="bst__linked_8h.htm#ab91e75b0312ca2ef3a4e523385b6d5c4">bst_node</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>BST node </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8db7b9cc127b114e89b4f1711cdcdfd2" name="a8db7b9cc127b114e89b4f1711cdcdfd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8db7b9cc127b114e89b4f1711cdcdfd2">&#9670;&#160;</a></span>bst_balanced()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_balanced </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines whether or not a tree is a balanced tree. All node heights are no more than one greater than any child heights.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if source is balanced, FALSE otherwise </dd></dl>

</div>
</div>
<a id="a98e78b40c1c60c9c59a902d2d788152d" name="a98e78b40c1c60c9c59a902d2d788152d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98e78b40c1c60c9c59a902d2d788152d">&#9670;&#160;</a></span>bst_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> **&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies source to target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a97a78151ba2ee9dc65c0779d463cce02" name="a97a78151ba2ee9dc65c0779d463cce02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97a78151ba2ee9dc65c0779d463cce02">&#9670;&#160;</a></span>bst_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns number of items in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- number of items in BST </dd></dl>

</div>
</div>
<a id="aa95cfbce2d83f6508a68adaaa9e34d65" name="aa95cfbce2d83f6508a68adaaa9e34d65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa95cfbce2d83f6508a68adaaa9e34d65">&#9670;&#160;</a></span>bst_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_empty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a BST is empty.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>TRUE if the BST is empty, FALSE otherwise </dd></dl>

</div>
</div>
<a id="a537524e3705b499bce7b0c39651945d3" name="a537524e3705b499bce7b0c39651945d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a537524e3705b499bce7b0c39651945d3">&#9670;&#160;</a></span>bst_equals()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_equals </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if two trees contain same data in same configuration.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if target is identical to source, FALSE otherwise </dd></dl>

</div>
</div>
<a id="ae5af68d21028d33b9ca8746581422b3b" name="ae5af68d21028d33b9ca8746581422b3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5af68d21028d33b9ca8746581422b3b">&#9670;&#160;</a></span>bst_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_free </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> **&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Frees all parts of a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3e947dc3a56a1728d86e3603d33dedee" name="a3e947dc3a56a1728d86e3603d33dedee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e947dc3a56a1728d86e3603d33dedee">&#9670;&#160;</a></span>bst_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_full </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines if a BST is full.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if the BST is full, FALSE otherwise </dd></dl>

</div>
</div>
<a id="a6dde7b5c7994aacac2591c0b6b5e42a2" name="a6dde7b5c7994aacac2591c0b6b5e42a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dde7b5c7994aacac2591c0b6b5e42a2">&#9670;&#160;</a></span>bst_initialize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structbst__linked.htm">bst_linked</a> * bst_initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes a BST.</p>
<dl class="section return"><dt>Returns</dt><dd>pointer to a BST </dd></dl>

</div>
</div>
<a id="aca3ec0054542adb0680c8cb4fdb4a20d" name="aca3ec0054542adb0680c8cb4fdb4a20d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca3ec0054542adb0680c8cb4fdb4a20d">&#9670;&#160;</a></span>bst_inorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_inorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a BST to an array in inorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a841b1190e477ed19d101bbcba7e5e685" name="a841b1190e477ed19d101bbcba7e5e685"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a841b1190e477ed19d101bbcba7e5e685">&#9670;&#160;</a></span>bst_insert()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inserts a copy of an item into a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST Pointer to a BST. </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item to push </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if item inserted, FALSE otherwise </dd></dl>

</div>
</div>
<a id="a9751875df4515840566a2f41336054dc" name="a9751875df4515840566a2f41336054dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9751875df4515840566a2f41336054dc">&#9670;&#160;</a></span>bst_leaf_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_leaf_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of leaf nodes in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with no children. </dd></dl>

</div>
</div>
<a id="a8b80207f6530db7ce5307f427152ecd2" name="a8b80207f6530db7ce5307f427152ecd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b80207f6530db7ce5307f427152ecd2">&#9670;&#160;</a></span>bst_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the maximum item in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of maximum item </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if a maximum value is found, FALSE otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="a03cd6ac43b30b2a5bdd86710e061f0ee" name="a03cd6ac43b30b2a5bdd86710e061f0ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03cd6ac43b30b2a5bdd86710e061f0ee">&#9670;&#160;</a></span>bst_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_min </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the minimum item in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of minimum item </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if a minimum value is found, FALSE otherwise (list is empty) </dd></dl>

</div>
</div>
<a id="ac80910535346660f4628b104aa3d63ce" name="ac80910535346660f4628b104aa3d63ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac80910535346660f4628b104aa3d63ce">&#9670;&#160;</a></span>bst_node_counts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_node_counts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>zero</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>one</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>two</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines the number of nodes with zero, one, and two children. (May not call bst_leaf_count, bst_one_child_count, or bst_two_child_count.)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">zero</td><td>- count of leaf nodes (no children) </td></tr>
    <tr><td class="paramname">one</td><td>- count of nodes with one child </td></tr>
    <tr><td class="paramname">two</td><td>- count of nodes with two children </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af74f183ae675b6fdcc1d1feb8c49602e" name="af74f183ae675b6fdcc1d1feb8c49602e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af74f183ae675b6fdcc1d1feb8c49602e">&#9670;&#160;</a></span>bst_one_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_one_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with one child in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with one child. </dd></dl>

</div>
</div>
<a id="a6584e1a42dadce1471ca0e451463b4aa" name="a6584e1a42dadce1471ca0e451463b4aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6584e1a42dadce1471ca0e451463b4aa">&#9670;&#160;</a></span>bst_postorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_postorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a tree to an array in postorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9988c51188dc19ac00cf37e7108113ff" name="a9988c51188dc19ac00cf37e7108113ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9988c51188dc19ac00cf37e7108113ff">&#9670;&#160;</a></span>bst_preorder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_preorder </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a> *&#160;</td>
          <td class="paramname"><em>items</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the contents of a BST to an array in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">items</td><td>- array of items: length must be at least size of BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a06ae39906ea3559a8d085a82fefe37cc" name="a06ae39906ea3559a8d085a82fefe37cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06ae39906ea3559a8d085a82fefe37cc">&#9670;&#160;</a></span>bst_print()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bst_print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints the items in a BST in preorder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5fcd3c3d41dc8afbb7e187aeb63cde72" name="a5fcd3c3d41dc8afbb7e187aeb63cde72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fcd3c3d41dc8afbb7e187aeb63cde72">&#9670;&#160;</a></span>bst_remove()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes a value matching key in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to the item removed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if item removed, FALSE otherwise (key not found) </dd></dl>

</div>
</div>
<a id="a2f274c4627c7a02541e80f14105062fe" name="a2f274c4627c7a02541e80f14105062fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f274c4627c7a02541e80f14105062fe">&#9670;&#160;</a></span>bst_retrieve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_retrieve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="data_8h.htm#a8f1c9fafcef5a26e0b113b99d63365b1">data_ptr</a>&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Retrieves a copy of a value matching key in a BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
    <tr><td class="paramname">key</td><td>- key value to search for </td></tr>
    <tr><td class="paramname">item</td><td>- pointer to copy of the item retrieved </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if item retrieved, FALSE otherwise (key not found) </dd></dl>

</div>
</div>
<a id="af164f2d603caf92d9b247e4e78aa867b" name="af164f2d603caf92d9b247e4e78aa867b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af164f2d603caf92d9b247e4e78aa867b">&#9670;&#160;</a></span>bst_two_child_count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bst_two_child_count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Finds the number of nodes with two children in a tree.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- count of nodes with two children </dd></dl>

</div>
</div>
<a id="a245ac82a46c4b00e0747ac2f623f678c" name="a245ac82a46c4b00e0747ac2f623f678c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a245ac82a46c4b00e0747ac2f623f678c">&#9670;&#160;</a></span>bst_valid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="data_8h.htm#a4b159ab7d9637f4ccd0d99f6e6aea738">BOOLEAN</a> bst_valid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structbst__linked.htm">bst_linked</a> *&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines whether or not a tree is a valid BST.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>- pointer to a BST </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- TRUE if source is valid, FALSE otherwise </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="bst__linked_8h.htm">bst_linked.h</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.7 </li>
  </ul>
</div>
</body>
</html>
